<title>Visual Data</title>
<h1>Visual Data</h1>
<h2>Color and Size</h2>
	<p>You may have noticed that some of my helper functions for dealing with the data from the JSON file weren't utilized, specifically the radius and color functions. Take another look:</p>
	<code><xmp>var radius = function(city) {
		return 25 * Math.sqrt(parseInt(city.population) / (1000000 * 3.14));
	};
	
	var color = function(city) {
		var growth = parseFloat(city.growth_from_2000_to_2013);
			r = 0, g = 0, b = 0;
		if (growth > 0) {
			if (growth > 30) growth = 30;
			b = Math.round(255 - (255 * growth / 30));
			g = 255 - b;
		}
		else {
			if (growth < -10) growth = -10;
			b = Math.round(255 - (255 * growth / -10));
			r = 255 - b;
		}
		return "rgb(" + r + "," + g + "," + b + ")";
	};</xmp></code>
	<p>First, consider the radius function. The radius should be larger for cities with larger populations. But I don't want it to grow linearly, so it returns the square root, along with a couple of other numbers to help titrate the size</p>
	<p>Likewise, the color dynamically changes based on the growth. In 10 years time, you would expect the average city to grow more than decline in population, and this is represented via a RGB shader. If the city did not grow, it stays blue; if the city grew, it shades greener; if the city declined, then it shades more red. 
	<p>Then, I would append a few more attributes under the "cy" and "cx" attributes that were added earlier to the circles. These attributes utilize the function to create a more visual effect on the map and the objects appended to our SVG element:
	<code><xmp>		.attr("r", function(d) {return 25*radius(d) + 'px';})
		.attr("fill", function(d) {return color(d);});
</xmp></code>
	Along with the radius, this allows us to be able to see a more interesting map</p>
	<svg></svg>
		<script src="https://d3js.org/d3.v4.min.js"></script>
		<script src="https://d3js.org/topojson.v2.min.js"></script>
		<script src="https://rawgit.com/skinnerjake/How-To/master/script.js"></script>
	<form action="./">
	<p>Now this I can work with! There are several easily discernable trends, such as:
	<ul>
		<li>Larger cities don't experience large growth (such as New York, L.A., Chicago, etc.).</li>
		<li>Cities in the midwest and south tend to see little growth, and in many cases, noticable decline (like in the Ohio/Michigan/Pennsylvania "Rust Belt" region).</li>
		<li>The inland cities of California experienced a consistent growth as a whole.</li>
	</ul>
	These are just several examples. In the future, I would look to add other capabilities such as mouseover effects, names, etc. To be honest, I simply ran out of time! There are some really cool things to do in D3.js, and JavaScript in general, and I encourage you to explore it more for yourself!</p>
	
<h2>Code Summary</h2>
<h3>index.html</h3>
<code><xmp><!DOCTYPE html>
<html>
	<head>
		<title>First Map!</title>
	</head>
	<body>
		<svg></svg>
		<script src="https://d3js.org/d3.v4.min.js"></script>
		<script src="https://d3js.org/topojson.v2.min.js"></script>
		<script src="script.js"></script>
	</body>
</html></xmp></code>

<h3>script.js</h3>
<code><xmp>var width = 960,
	height = 600;
	
var svg = d3.select("svg")
	.attr("width", width)
	.attr("height", height)
	.attr("fill", "none")
	.attr("stroke", "#000");
	
var projection = d3.geoAlbersUsa()
	.translate([width/2, height/2])
	.scale(1275);
	
var path = d3.geoPath()

d3.json("https://d3js.org/us-10m.v1.json", function(error, us) {
	if (error) throw error;

	svg.append("path")
		.attr("d", path(topojson.feature(us, us.objects.states)));
});
	
d3.json("https://gist.githubusercontent.com/Miserlou/c5cd8364bf9b2420bb29/raw/2bf258763cdddd704f8ffd3ea9a3e81d25e2c6f6/cities.json", function(error, file) {
	if (error) return console.error(error);
	
	var coordinates = function(city) {
		return [city.longitude, city.latitude];
	};
	
	var radius = function(city) {
		return Math.sqrt(parseInt(city.population) / (1000000 * 3.14));
	};
	
	var color = function(city) {
		var growth = parseFloat(city.growth_from_2000_to_2013);
			r = 0, g = 0, b = 0;
		if (growth > 0) {
			if (growth > 30) growth = 30;
			b = Math.round(255 - (255 * growth / 30));
			g = 255 - b;
		}
		else {
			if (growth < -10) growth = -10;
			b = Math.round(255 - (255 * growth / -10));
			r = 255 - b;
		}
		return "rgb(" + r + "," + g + "," + b + ")";
	};
	
	svg.selectAll("circle")
		.data(file).enter()
		.append("circle")
			.attr("cx", function(d) {return projection(coordinates(d))[0];})
			.attr("cy", function(d) {return projection(coordinates(d))[1];})
			.attr("r", function(d) {return 25*radius(d) + 'px';})
			.attr("fill", function(d) {return color(d);});
});</xmp></code>
	<form action="./">
		<input type="submit" value="Return">
	</form>